{"version":3,"sources":["FormInput/styles.js","FormInput/index.js","Tabs/styles.js","Tabs/index.js","DemoTable/NewEntryModal.js","utils/array.js","DemoTable/styles.js","DemoTable/index.js","App.js","reportWebVitals.js","index.js"],"names":["InputWrapper","styled","div","Input","input","Label","p","FormInput","label","value","onChange","type","className","e","target","Wrapper","ul","ItemWrapper","li","Item","a","Tabs","tabs","activeIndex","map","tab","idx","href","onClick","NewEntryModal","show","onAdd","onClose","Modal","onHide","Header","Body","Form","onSubmit","event","form","currentTarget","checkValidity","preventDefault","stopPropagation","data","FormData","values","Object","fromEntries","entries","range_l","parseInt","range_u","reading","Group","controlId","Control","required","name","Button","median","arr","mid","Math","floor","length","nums","sort","b","FilterControl","TableWrapper","DemoTable","props","_sortList","sortBy","sortDirection","list","state","newList","_","SortDirection","DESC","reverse","_sort","sortable","includes","sortedList","setState","ASC","sensorType","sensorName","activeTab","metrics","showNewEntryModal","fetch","headers","Accept","then","res","json","prevProps","prevState","this","filter","item","sensor_type","trim","boxes","Set","box_id","Array","from","reduce","prev","curr","_list","sensorTypes","unit","toFixed","mean","total","amount","index","array","getMetrics","toggleNewEntryModal","bind","width","height","headerHeight","rowHeight","rowCount","rowGetter","dataKey","newItem","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kmBAEO,IAAMA,EAAeC,IAAOC,IAAV,KAMZC,EAAQF,IAAOG,MAAV,KAELC,EAAQJ,IAAOK,EAAV,KCMHC,EAdG,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,OACE,eAACV,EAAD,WACE,cAACK,EAAD,UAAQG,IACR,cAACL,EAAD,CACEQ,KAAK,OACLC,UAAU,sBACVH,MAAOA,EACPC,SAAU,SAACG,GAAD,OAAOH,EAASG,EAAEC,OAAOL,c,+MCRpC,IAAMM,EAAUd,IAAOe,GAAV,KAEPC,EAAchB,IAAOiB,GAAV,KAEXC,EAAOlB,IAAOmB,EAAV,KCcFC,EAlBF,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,YAAab,EAAe,EAAfA,SACjC,OACE,cAACK,EAAD,CAASH,UAAU,eAAnB,SACGU,EAAKE,KAAI,SAACC,EAAKC,GAAN,OACR,cAACT,EAAD,CAAaL,UAAU,WAAvB,SACE,cAACO,EAAD,CACEP,UAAS,mBAAcc,IAAQH,EAAc,SAAW,IACxDI,KAAK,IACLC,QAAS,kBAAMlB,EAASgB,IAH1B,SAKGD,Y,wBCmEEI,EA3EO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAmBpC,OACE,eAACC,EAAA,EAAD,CAAOH,KAAMA,EAAMI,OAAQF,EAA3B,UACE,cAACC,EAAA,EAAME,OAAP,4BACA,cAACF,EAAA,EAAMG,KAAP,UACE,eAACC,EAAA,EAAD,CAAMC,SAtBS,SAACC,GACpB,IAAMC,EAAOD,EAAME,cACnB,IAA6B,IAAzBD,EAAKE,gBACPH,EAAMI,iBACNJ,EAAMK,sBACD,CACLL,EAAMI,iBACN,IAAME,EAAO,IAAIC,SAASN,GACpBO,EAASC,OAAOC,YAAYJ,EAAKK,WACvCnB,EAAM,2BACDgB,GADA,IAEHI,QAASC,SAASL,EAAOI,SACzBE,QAASD,SAASL,EAAOM,SACzBC,QAASF,SAASL,EAAOO,cASzB,UACE,eAACjB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,KAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,iBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,UAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,SAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,qBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,cAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,cAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,0BACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,mBAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,mBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,YAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,OAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,mBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,YAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,sBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,eAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,sBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,eAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,YAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,wBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,iBAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,WAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,uBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,gBAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,UAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,sBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,eAE1C,eAACtB,EAAA,EAAKkB,MAAN,CAAYC,UAAU,aAAtB,UACE,cAACnB,EAAA,EAAKhC,MAAN,yBACA,cAACgC,EAAA,EAAKoB,QAAN,CAAcC,UAAQ,EAAC/C,KAAK,OAAOgD,KAAK,kBAE1C,cAACC,EAAA,EAAD,CAAQjD,KAAK,SAAb,kCCxEGkD,EAAS,SAACC,GACrB,IAAMC,EAAMC,KAAKC,MAAMH,EAAII,OAAS,GAClCC,EAAO,YAAIL,GAAKM,MAAK,SAAChD,EAAGiD,GAAJ,OAAUjD,EAAIiD,KACrC,OAAOP,EAAII,OAAS,IAAM,EAAIC,EAAKJ,IAAQI,EAAKJ,EAAM,GAAKI,EAAKJ,IAAQ,G,yVCDnE,IAAMhD,EAAUd,IAAOC,IAAV,KAOPoE,EAAgBrE,IAAOC,IAAV,KAKbqE,EAAetE,IAAOC,IAAV,KC6NVsE,E,kDA5Nb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyFRC,UAAY,YAAgC,IAA7BC,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cACbC,EAAS,EAAKC,MAAdD,KACJE,EAAUC,IAAEL,OAAOE,EAAM,CAACF,IAI9B,OAHIC,IAAkBK,IAAcC,MAClCH,EAAQI,UAEHJ,GAhGU,EAmGnBK,MAAQ,YAAgC,IAA7BT,EAA4B,EAA5BA,OAAQC,EAAoB,EAApBA,cAEjB,GADqB,EAAKE,MAAlBO,SACKC,SAASX,GAAS,CAC7B,IAAMY,EAAa,EAAKb,UAAU,CAAEC,SAAQC,kBAC5C,EAAKY,SAAS,CAAEb,SAAQC,gBAAeW,iBApGzC,EAAKT,MAAQ,CACXD,KAAM,GAENQ,SAAU,CAAC,cAAe,cAC1BV,OAAQ,GACRC,cAAeK,IAAcQ,IAC7BF,WAAY,GAEZG,WAAY,GACZC,WAAY,GAEZC,UAAW,EAEXC,QAAS,GACTC,mBAAmB,GAjBJ,E,gEAqBE,IAAD,OAClBC,MAAM,sBAAuB,CAC3BC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,sBAGTC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACL,EAAKZ,SAAS,CAAEX,KAAMuB,S,yCAITC,EAAWC,GAAY,IAAD,EACyBC,KAAKzB,MAA7DH,EAD+B,EAC/BA,OAAQC,EADuB,EACvBA,cAAeC,EADQ,EACRA,KAAMa,EADE,EACFA,WAAYC,EADV,EACUA,WAoBjD,GAlBEhB,IAAW2B,EAAU3B,QACrBC,IAAkB0B,EAAU1B,eAC5BC,EAAKX,SAAWoC,EAAUzB,KAAKX,QAC/BwB,IAAeY,EAAUZ,YACzBC,IAAeW,EAAUX,YAEzBY,KAAKf,SAAS,CACZD,WAAYgB,KAAK7B,UAAU,CACzBC,SACAC,kBACC4B,QACD,SAACC,GAAD,OACEA,EAAKC,YAAYpB,SAASI,EAAWiB,SACrCF,EAAK9C,KAAK2B,SAASK,EAAWgB,aAKlC9B,EAAKX,SAAWoC,EAAUzB,KAAKX,OAAQ,CACzC,IAAM0C,EAAQ,IAAIC,IAAIhC,EAAKrD,KAAI,SAACiF,GAAD,OAAUA,EAAKK,WAsB9CP,KAAKf,SAAS,CACZK,QAASkB,MAAMC,KAAKJ,GAAOK,QACzB,SAACC,EAAMC,GAAP,4BACKD,GADL,YAtBe,SAACE,GAClB,IAAMC,EAAc,IAAIR,IAAIO,EAAM5F,KAAI,SAACiF,GAAD,OAAUA,EAAKC,gBAErD,OAAOK,MAAMC,KAAKK,GAAa7F,KAAI,SAACkE,GAAD,MAAiB,CAClDoB,OAAQM,EAAM,GAAGN,OACjBQ,KAAMF,EAAMZ,QAAO,SAACC,GAAD,OAAUA,EAAKC,cAAgBhB,KAAY,GAAG4B,KACjEZ,YAAahB,EACb7B,OAAQA,EACNuD,EACGZ,QAAO,SAACC,GAAD,OAAUA,EAAKC,cAAgBhB,KACtClE,KAAI,SAACiF,GAAD,OAAUA,EAAKnD,YACtBiE,QAAQ,GACVC,MF/EW1D,EEgFTsD,EACGZ,QAAO,SAACC,GAAD,OAAUA,EAAKC,cAAgBhB,KACtClE,KAAI,SAACiF,GAAD,OAAUA,EAAKnD,WFjFhCQ,EAAImD,QAAO,SAACQ,EAAOC,EAAQC,EAAOC,GAEhC,OADAH,GAASC,EACLC,IAAUC,EAAM1D,OAAS,EACpBuD,EAAQG,EAAM1D,OAEduD,ME6EDF,QAAQ,IFnFA,IAACzD,KE2FN+D,CAAWhD,EAAK2B,QAAO,SAACC,GAAD,OAAUA,EAAKK,SAAWK,UAEtD,S,4CAuBe,IACbrB,EAAsBS,KAAKzB,MAA3BgB,kBACRS,KAAKf,SAAS,CAAEM,mBAAoBA,M,+BAG5B,IAAD,SAWHS,KAAKzB,MATPY,EAFK,EAELA,WACAC,EAHK,EAGLA,WACAC,EAJK,EAILA,UACAjB,EALK,EAKLA,OACAC,EANK,EAMLA,cACAW,EAPK,EAOLA,WACAM,EARK,EAQLA,QACAC,EATK,EASLA,kBACAjB,EAVK,EAULA,KAGF,OACE,eAAC,EAAD,WACE,eAACP,EAAD,WACE,cAAC,EAAD,CACE9D,MAAM,eACNC,MAAOiF,EACPhF,SAAU,SAACgF,GAAD,OAAgB,EAAKF,SAAS,CAAEE,kBAE5C,cAAC,EAAD,CACElF,MAAM,eACNC,MAAOkF,EACPjF,SAAU,SAACiF,GAAD,OAAgB,EAAKH,SAAS,CAAEG,kBAE5C,cAAC/B,EAAA,EAAD,CAAQhC,QAAS2E,KAAKuB,oBAAoBC,KAAKxB,MAA/C,wBAEF,cAAC,EAAD,CACEjF,KAAM,CAAC,OAAQ,WACfC,YAAaqE,EACblF,SAAU,SAACkF,GAAD,OAAe,EAAKJ,SAAS,CAAEI,iBAG5B,IAAdA,GACC,cAACrB,EAAD,UACE,cAAC,IAAD,UACG,gBAAGyD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACC,eAAC,IAAD,CACED,MAAOA,EACPC,OAAQA,EACRC,aAAc,GACdC,UAAW,GACX/D,KAAM,EAAKgB,MACXT,OAAQA,EACRC,cAAeA,EACfwD,SAAU7C,EAAWrB,OACrBmE,UAAW,gBAAGV,EAAH,EAAGA,MAAH,OAAepC,EAAWoC,IATvC,UAWE,cAAC,IAAD,CAAQnH,MAAM,KAAK8H,QAAQ,KAAKN,MAAO,MACvC,cAAC,IAAD,CAAQxH,MAAM,SAAS8H,QAAQ,SAASN,MAAO,MAC/C,cAAC,IAAD,CACExH,MAAM,cACN8H,QAAQ,cACRN,MAAO,MAET,cAAC,IAAD,CAAQxH,MAAM,OAAO8H,QAAQ,OAAON,MAAO,MAC3C,cAAC,IAAD,CAAQxH,MAAM,OAAO8H,QAAQ,OAAON,MAAO,MAC3C,cAAC,IAAD,CAAQxH,MAAM,UAAU8H,QAAQ,UAAUN,MAAO,MACjD,cAAC,IAAD,CAAQxH,MAAM,UAAU8H,QAAQ,UAAUN,MAAO,MACjD,cAAC,IAAD,CAAQxH,MAAM,YAAY8H,QAAQ,YAAYN,MAAO,MACrD,cAAC,IAAD,CAAQxH,MAAM,WAAW8H,QAAQ,WAAWN,MAAO,MACnD,cAAC,IAAD,CAAQxH,MAAM,UAAU8H,QAAQ,UAAUN,MAAO,MACjD,cAAC,IAAD,CAAQxH,MAAM,aAAa8H,QAAQ,aAAaN,MAAO,cAMlD,IAAdpC,GACC,cAACrB,EAAD,UACE,cAAC,IAAD,UACG,gBAAGyD,EAAH,EAAGA,MAAOC,EAAV,EAAUA,OAAV,OACC,eAAC,IAAD,CACED,MAAOA,EACPC,OAAQA,EACRC,aAAc,GACdC,UAAW,GACXC,SAAUvC,EAAQ3B,OAClBmE,UAAW,gBAAGV,EAAH,EAAGA,MAAH,OAAe9B,EAAQ8B,IANpC,UAQE,cAAC,IAAD,CAAQnH,MAAM,SAAS8H,QAAQ,SAASN,MAAO,MAC/C,cAAC,IAAD,CACExH,MAAM,cACN8H,QAAQ,cACRN,MAAO,MAET,cAAC,IAAD,CAAQxH,MAAM,SAAS8H,QAAQ,SAASN,MAAO,MAC/C,cAAC,IAAD,CAAQxH,MAAM,OAAO8H,QAAQ,OAAON,MAAO,MAC3C,cAAC,IAAD,CAAQxH,MAAM,OAAO8H,QAAQ,OAAON,MAAO,cAMrD,cAAC,EAAD,CACElG,KAAMgE,EACN/D,MAAO,SAACwG,GACN,IAAMnB,EAAK,CAAImB,GAAJ,mBAAgB1D,IAC3B,EAAKW,SAAS,CAAEX,KAAMuC,EAAOtB,mBAAmB,KAElD9D,QAASuE,KAAKuB,oBAAoBC,KAAKxB,e,GAtNzBiC,IAAMC,WCEfC,MARf,WACE,OACE,qBAAK9H,UAAU,MAAf,SACE,cAAC,EAAD,OCCS+H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fa19a930.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const InputWrapper = styled.div`\r\n  margin-right: 10px;\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Input = styled.input``;\r\n\r\nexport const Label = styled.p`\r\n  margin: 0 10px 0 0;\r\n`;\r\n","import { InputWrapper, Input, Label } from \"./styles\";\r\n\r\nconst FormInput = ({ label, value, onChange }) => {\r\n  return (\r\n    <InputWrapper>\r\n      <Label>{label}</Label>\r\n      <Input\r\n        type=\"text\"\r\n        className=\"form-control w-auto\"\r\n        value={value}\r\n        onChange={(e) => onChange(e.target.value)}\r\n      />\r\n    </InputWrapper>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.ul``;\r\n\r\nexport const ItemWrapper = styled.li``;\r\n\r\nexport const Item = styled.a``;\r\n","import { Wrapper, ItemWrapper, Item } from \"./styles\";\r\n\r\nconst Tabs = ({ tabs, activeIndex, onChange }) => {\r\n  return (\r\n    <Wrapper className=\"nav nav-tabs\">\r\n      {tabs.map((tab, idx) => (\r\n        <ItemWrapper className=\"nav-item\">\r\n          <Item\r\n            className={`nav-link ${idx === activeIndex ? \"active\" : \"\"}`}\r\n            href=\"#\"\r\n            onClick={() => onChange(idx)}\r\n          >\r\n            {tab}\r\n          </Item>\r\n        </ItemWrapper>\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Tabs;\r\n","import Modal from \"react-bootstrap/Modal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst NewEntryModal = ({ show, onAdd, onClose }) => {\r\n  const handleSubmit = (event) => {\r\n    const form = event.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n    } else {\r\n      event.preventDefault();\r\n      const data = new FormData(form);\r\n      const values = Object.fromEntries(data.entries());\r\n      onAdd({\r\n        ...values,\r\n        range_l: parseInt(values.range_l),\r\n        range_u: parseInt(values.range_u),\r\n        reading: parseInt(values.reading),\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal show={show} onHide={onClose}>\r\n      <Modal.Header>Add New Entry</Modal.Header>\r\n      <Modal.Body>\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group controlId=\"id\">\r\n            <Form.Label>Id</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"id\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"box_id\">\r\n            <Form.Label>Box Id</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"box_id\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"sensor_type\">\r\n            <Form.Label>Sensor Type</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"sensor_type\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"unit\">\r\n            <Form.Label>Unit</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"unit\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"name\">\r\n            <Form.Label>Name</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"name\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"range_l\">\r\n            <Form.Label>Range L</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"range_l\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"range_u\">\r\n            <Form.Label>Range U</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"range_u\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"longitude\">\r\n            <Form.Label>Longitude</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"longitude\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"latitude\">\r\n            <Form.Label>Latitude</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"latitude\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"reading\">\r\n            <Form.Label>Reading</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"reading\" />\r\n          </Form.Group>\r\n          <Form.Group controlId=\"reading_ts\">\r\n            <Form.Label>Reading TS</Form.Label>\r\n            <Form.Control required type=\"text\" name=\"reading_ts\" />\r\n          </Form.Group>\r\n          <Button type=\"submit\">Submit form</Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default NewEntryModal;\r\n","export const median = (arr) => {\r\n  const mid = Math.floor(arr.length / 2),\r\n    nums = [...arr].sort((a, b) => a - b);\r\n  return arr.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2;\r\n};\r\n\r\nexport const mean = (arr) =>\r\n  arr.reduce((total, amount, index, array) => {\r\n    total += amount;\r\n    if (index === array.length - 1) {\r\n      return total / array.length;\r\n    } else {\r\n      return total;\r\n    }\r\n  });\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100vh;\r\n`;\r\n\r\nexport const FilterControl = styled.div`\r\n  padding: 20px;\r\n  display: flex;\r\n`;\r\n\r\nexport const TableWrapper = styled.div`\r\n  flex-grow: 1;\r\n`;\r\n","import React from \"react\";\r\nimport { AutoSizer, Column, Table, SortDirection } from \"react-virtualized\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nimport FormInput from \"../FormInput\";\r\nimport Tabs from \"../Tabs\";\r\nimport NewEntryModal from \"./NewEntryModal\";\r\n\r\nimport { mean, median } from \"../utils/array\";\r\n\r\nimport { FilterControl, Wrapper, TableWrapper } from \"./styles.js\";\r\n\r\nclass DemoTable extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      list: [],\r\n\r\n      sortable: [\"sensor_type\", \"reading_ts\"],\r\n      sortBy: \"\",\r\n      sortDirection: SortDirection.ASC,\r\n      sortedList: [],\r\n\r\n      sensorType: \"\",\r\n      sensorName: \"\",\r\n\r\n      activeTab: 0,\r\n\r\n      metrics: [],\r\n      showNewEntryModal: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"sensor_reading.json\", {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((json) => {\r\n        this.setState({ list: json });\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const { sortBy, sortDirection, list, sensorType, sensorName } = this.state;\r\n    if (\r\n      sortBy !== prevState.sortBy ||\r\n      sortDirection !== prevState.sortDirection ||\r\n      list.length !== prevState.list.length ||\r\n      sensorType !== prevState.sensorType ||\r\n      sensorName !== prevState.sensorName\r\n    ) {\r\n      this.setState({\r\n        sortedList: this._sortList({\r\n          sortBy,\r\n          sortDirection,\r\n        }).filter(\r\n          (item) =>\r\n            item.sensor_type.includes(sensorType.trim()) &&\r\n            item.name.includes(sensorName.trim())\r\n        ),\r\n      });\r\n    }\r\n\r\n    if (list.length !== prevState.list.length) {\r\n      const boxes = new Set(list.map((item) => item.box_id));\r\n\r\n      const getMetrics = (_list) => {\r\n        const sensorTypes = new Set(_list.map((item) => item.sensor_type));\r\n\r\n        return Array.from(sensorTypes).map((sensorType) => ({\r\n          box_id: _list[0].box_id,\r\n          unit: _list.filter((item) => item.sensor_type === sensorType)[0].unit,\r\n          sensor_type: sensorType,\r\n          median: median(\r\n            _list\r\n              .filter((item) => item.sensor_type === sensorType)\r\n              .map((item) => item.reading)\r\n          ).toFixed(2),\r\n          mean: mean(\r\n            _list\r\n              .filter((item) => item.sensor_type === sensorType)\r\n              .map((item) => item.reading)\r\n          ).toFixed(2),\r\n        }));\r\n      };\r\n\r\n      this.setState({\r\n        metrics: Array.from(boxes).reduce(\r\n          (prev, curr) => [\r\n            ...prev,\r\n            ...getMetrics(list.filter((item) => item.box_id === curr)),\r\n          ],\r\n          []\r\n        ),\r\n      });\r\n    }\r\n  }\r\n\r\n  _sortList = ({ sortBy, sortDirection }) => {\r\n    const { list } = this.state;\r\n    let newList = _.sortBy(list, [sortBy]);\r\n    if (sortDirection === SortDirection.DESC) {\r\n      newList.reverse();\r\n    }\r\n    return newList;\r\n  };\r\n\r\n  _sort = ({ sortBy, sortDirection }) => {\r\n    const { sortable } = this.state;\r\n    if (sortable.includes(sortBy)) {\r\n      const sortedList = this._sortList({ sortBy, sortDirection });\r\n      this.setState({ sortBy, sortDirection, sortedList });\r\n    }\r\n  };\r\n\r\n  toggleNewEntryModal() {\r\n    const { showNewEntryModal } = this.state;\r\n    this.setState({ showNewEntryModal: !showNewEntryModal });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      sensorType,\r\n      sensorName,\r\n      activeTab,\r\n      sortBy,\r\n      sortDirection,\r\n      sortedList,\r\n      metrics,\r\n      showNewEntryModal,\r\n      list,\r\n    } = this.state;\r\n\r\n    return (\r\n      <Wrapper>\r\n        <FilterControl>\r\n          <FormInput\r\n            label=\"Sensor Type:\"\r\n            value={sensorType}\r\n            onChange={(sensorType) => this.setState({ sensorType })}\r\n          />\r\n          <FormInput\r\n            label=\"Sensor Name:\"\r\n            value={sensorName}\r\n            onChange={(sensorName) => this.setState({ sensorName })}\r\n          />\r\n          <Button onClick={this.toggleNewEntryModal.bind(this)}>Add New</Button>\r\n        </FilterControl>\r\n        <Tabs\r\n          tabs={[\"Data\", \"Metrics\"]}\r\n          activeIndex={activeTab}\r\n          onChange={(activeTab) => this.setState({ activeTab })}\r\n        />\r\n\r\n        {activeTab === 0 && (\r\n          <TableWrapper>\r\n            <AutoSizer>\r\n              {({ width, height }) => (\r\n                <Table\r\n                  width={width}\r\n                  height={height}\r\n                  headerHeight={50}\r\n                  rowHeight={30}\r\n                  sort={this._sort}\r\n                  sortBy={sortBy}\r\n                  sortDirection={sortDirection}\r\n                  rowCount={sortedList.length}\r\n                  rowGetter={({ index }) => sortedList[index]}\r\n                >\r\n                  <Column label=\"Id\" dataKey=\"id\" width={100} />\r\n                  <Column label=\"Box Id\" dataKey=\"box_id\" width={100} />\r\n                  <Column\r\n                    label=\"Sensor Type\"\r\n                    dataKey=\"sensor_type\"\r\n                    width={150}\r\n                  />\r\n                  <Column label=\"Unit\" dataKey=\"unit\" width={100} />\r\n                  <Column label=\"Name\" dataKey=\"name\" width={300} />\r\n                  <Column label=\"Range L\" dataKey=\"range_l\" width={100} />\r\n                  <Column label=\"Range U\" dataKey=\"range_u\" width={100} />\r\n                  <Column label=\"Longitude\" dataKey=\"longitude\" width={100} />\r\n                  <Column label=\"Latitude\" dataKey=\"latitude\" width={100} />\r\n                  <Column label=\"Reading\" dataKey=\"reading\" width={100} />\r\n                  <Column label=\"Reading TS\" dataKey=\"reading_ts\" width={300} />\r\n                </Table>\r\n              )}\r\n            </AutoSizer>\r\n          </TableWrapper>\r\n        )}\r\n        {activeTab === 1 && (\r\n          <TableWrapper>\r\n            <AutoSizer>\r\n              {({ width, height }) => (\r\n                <Table\r\n                  width={width}\r\n                  height={height}\r\n                  headerHeight={50}\r\n                  rowHeight={30}\r\n                  rowCount={metrics.length}\r\n                  rowGetter={({ index }) => metrics[index]}\r\n                >\r\n                  <Column label=\"Box Id\" dataKey=\"box_id\" width={100} />\r\n                  <Column\r\n                    label=\"Sensor Type\"\r\n                    dataKey=\"sensor_type\"\r\n                    width={150}\r\n                  />\r\n                  <Column label=\"Median\" dataKey=\"median\" width={100} />\r\n                  <Column label=\"Mean\" dataKey=\"mean\" width={100} />\r\n                  <Column label=\"Unit\" dataKey=\"unit\" width={100} />\r\n                </Table>\r\n              )}\r\n            </AutoSizer>\r\n          </TableWrapper>\r\n        )}\r\n        <NewEntryModal\r\n          show={showNewEntryModal}\r\n          onAdd={(newItem) => {\r\n            const _list = [newItem, ...list];\r\n            this.setState({ list: _list, showNewEntryModal: false });\r\n          }}\r\n          onClose={this.toggleNewEntryModal.bind(this)}\r\n        />\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemoTable;\r\n","import \"./App.css\";\n\nimport \"react-virtualized/styles.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport DemoTable from \"./DemoTable\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DemoTable />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}